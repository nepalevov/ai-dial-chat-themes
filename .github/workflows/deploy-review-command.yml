name: deploy-review-command
on:
  repository_dispatch:
    types: [deploy-review-command]
jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        run: echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github.event) }}

  # plan:
  #   uses: nepalevov/ai-dial-ci/.github/workflows/gh_environment.yml@main
  #   with:
  #     operation: plan
  #     environment_name: ${{ github.event.client_payload.

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check repository owner
        id: owner
        run: |
          DISPATCHED_REPO_NAME=${{ github.event.client_payload.github.payload.repository.name || github.event.client_payload.github.event.repository.name }}
          DISPATCHED_REPO_OWNER=${{ github.event.client_payload.github.payload.repository.owner.login || github.event.client_payload.github.event.repository.owner.login }}
          ERROR_MESSAGE=""
          if [[ "$DISPATCHED_REPO_OWNER" != "$GITHUB_REPOSITORY_OWNER" ]]; then
          ERROR_MESSAGE="The event was not dispatched by a repository within the same owner."
          fi
          if [[ "$DISPATCHED_REPO_NAME" != ai-dial* ]]; then
          ERROR_MESSAGE+=" The repository name does not start with 'ai-dial'."
          fi
          if [[ -n "$ERROR_MESSAGE" ]]; then
            echo "$ERROR_MESSAGE"
            echo "status=$ERROR_MESSAGE" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Owner checks passed successfully."

      - name: Gather PR info
        id: pr_info
        run: |
          # Try to get values from github context first
          PR_NUMBER="${{ github.event.client_payload.pull_request.number }}"
          HEAD_REPO="${{ github.event.client_payload.pull_request.head.repo.full_name }}"
          HEAD_REF="${{ github.event.client_payload.pull_request.head.ref }}"

          # If any required value is missing, try to resolve via API
          if [[ -z "$PR_NUMBER" || -z "$HEAD_REPO" || -z "$HEAD_REF" ]]; then
            echo "Some values missing from context, falling back to API resolution..."

            # Get PR details by commit SHA
            HEAD_SHA="${{ github.event.client_payload.github.event.workflow_run.head_sha }}"
            SEARCH_PR_DATA=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              "https://api.github.com/search/issues?q=${HEAD_SHA}+repo:${{ github.repository }}+is:pr")

            PR_URL=$(echo "$SEARCH_PR_DATA" | jq -r '.items[0].pull_request.url')
            if [[ -n "$PR_URL" ]]; then
              PR_NUMBER=$(echo "$SEARCH_PR_DATA" | jq -r '.items[0].number')
              PR_DETAILS=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "$PR_URL")
              HEAD_REPO=$(echo "$PR_DETAILS" | jq -r .head.repo.full_name)
              HEAD_REF=$(echo "$PR_DETAILS" | jq -r .head.ref)
            fi
          fi

          # Validate and output
          ERROR_MESSAGE=""
          if [[ -z "$PR_NUMBER" ]]; then
            ERROR_MESSAGE+="PR number is missing. "
          fi
          if [[ -z "$HEAD_REPO" ]]; then
            ERROR_MESSAGE+="Head repository is missing. "
          fi
          if [[ -z "$HEAD_REF" ]]; then
            ERROR_MESSAGE+="Head reference is missing. "
          fi

          if [[ -n "$ERROR_MESSAGE" ]]; then
            echo "$ERROR_MESSAGE"
            echo "Context values:"
            echo "PR_NUMBER: '$PR_NUMBER'"
            echo "HEAD_REPO: '$HEAD_REPO'"
            echo "HEAD_REF: '$HEAD_REF'"
            echo "Search response:"
            echo "$SEARCH_PR_DATA" | jq '.'
            if [[ -n "$PR_DETAILS" ]]; then
              echo "PR details:"
              echo "$PR_DETAILS" | jq '.'
            fi
            echo "status=Could not resolve required PR information: $ERROR_MESSAGE" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "| Parameter         | Value       |"
          echo "|-------------------|-------------|"
          echo "| PR_NUMBER         | $PR_NUMBER  |"
          echo "| HEAD_REPO         | $HEAD_REPO  |"
          echo "| HEAD_REF          | $HEAD_REF   |"
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "repo=$HEAD_REPO" >> $GITHUB_OUTPUT
          echo "ref=$HEAD_REF" >> $GITHUB_OUTPUT

          # Set trigger URL based on source
          if [[ "${{ github.event.client_payload.github.action }}" == "scd" ]]; then
            TRIGGER_URL="${{ github.event.client_payload.github.payload.comment.html_url }}"
            echo "is_comment_trigger=${{ github.event.client_payload.github.action == 'scd' }}" >> $GITHUB_OUTPUT
          else
            TRIGGER_URL="${{ github.event.client_payload.github.event.workflow_run.html_url }}"
          fi
          echo "trigger=$TRIGGER_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_BOT_TOKEN }}

      - name: Deploy environment
        id: deploy
        run: |
          echo "Deploying with the following parameters:"
          echo "| Parameter         | Value                                   |"
          echo "|-------------------|-----------------------------------------|"
          echo "| GITHUB_PR         | pr-${{ steps.pr_info.outputs.number }}  |"
          echo "| GITHUB_REPO       | ${{ steps.pr_info.outputs.repo }}       |"
          echo "| GITHUB_REF        | ${{ steps.pr_info.outputs.ref }}        |"
          echo "| GITHUB_TRIGGER    | ${{ steps.pr_info.outputs.trigger }}    |"

          sleep 30
          echo "status=success" >>$GITHUB_OUTPUT # TODO: remove mock status after debug

      - name: Check overall status
        id: status
        if: success() || failure()
        run: |
          echo "Checking deployment status"
          GITHUB_WORKFLOW_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

          # Initialize the message
          MESSAGE=""

          # Initialize flags
          OWNER_CHECK_FLAG="✅"
          PR_INFO_CHECK_FLAG="✅"
          DEPLOY_CHECK_FLAG="✅"

          # Owner check
          if [[ -n "${{ steps.owner.outputs.status }}" ]]; then
            OWNER_CHECK_FLAG="❌"
            MESSAGE+=">- **Owner check failed**: ${{ steps.owner.outputs.status }}\n"
          fi

          # PR info check
          if [[ -n "${{ steps.pr_info.outputs.status }}" ]]; then
            PR_INFO_CHECK_FLAG="❌"
            MESSAGE+=">- **Find PR failed**: ${{ steps.pr_info.outputs.status }}\n"
          fi

          # Deployment check
          if [[ -n "${{ steps.deploy.outputs.status }}" && "${{ steps.deploy.outputs.status }}" != "success" ]]; then
            DEPLOY_CHECK_FLAG="❌"
            MESSAGE+=">- **Deployment failed**: ${{ steps.deploy.outputs.status }}\n"
          fi

          # If there are no errors, set a success message
          if [[ -z "${{ steps.owner.outputs.status }}" && -z "${{ steps.pr_info.outputs.status }}" && -z "${{ steps.deploy.outputs.status }}" ]]; then
            MESSAGE=">OK\n"
          else
            MESSAGE+=">Something went wrong, check [GitHub Workflow run output](${GITHUB_WORKFLOW_URL})\n"
          fi

          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check               | Status                |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------------|-----------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Owner Check         | $OWNER_CHECK_FLAG     |" >> $GITHUB_STEP_SUMMARY
          echo "| PR Info Check       | $PR_INFO_CHECK_FLAG   |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Check    | $DEPLOY_CHECK_FLAG    |" >> $GITHUB_STEP_SUMMARY

          # Store message for potential comment
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Return status as comment
        if: |
          (success() || failure()) &&
          steps.pr_info.outputs.is_comment_trigger == 'true'
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name || github.event.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ steps.status.outputs.message }}
